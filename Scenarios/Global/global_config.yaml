---
# ######################################### Basic Parameters #######################################

# Scale factor. The world factory takes this parameter as input, building a scale model of the
# world. For example, if with scale_factor = 1 the world factory builds a model consisting of
# 1 million agents, then with scale_factor = 0.001 it builds a model consisting of only 1 thousand
# agents. All relevant quantities in the world, components and output are scaled using this
# universal scale factor.
scale_factor: 0.0005

# Profiler. If profile: True then the simulator runs with a profiler, recording information on
# runtime and performance in a file called profiler_output. The parameter pstats_records determines
# how many lines to print in the profiler report. For example, if pstats_records: 100 then only the
# most significant 100 lines are printed.
profile: False
pstats_records: 100

# Random seeds for each region. The Pandemia model is stochastic, and therefore a seed for the
# pseudo random number generators is needed. This seed is used by the world factor, which builds the
# world, and also by the simulator, which simulates the pandemic.
random_seed: 1

# Enable or disable the use of parallel processing. In Pandemia, a world consists of regions and
# parts of the simulation can be parallelized across these regions. The num_jobs parameter sets a
# maximum for the number of CPUs used by the simulator. If num_jobs < 1 then this maximum is
# os.cpu_count(). If num_jobs >= 1 then this maximum is min(num_jobs, os.cpu_count()). The actual
# number of CPUs used may be less than this maximum. In particular, the simulator takes into account
# the number of regions and the ratios of populations sizes between regions to calculate the optimal
# number of CPUs.
enable_parallel: True
num_jobs: -1

# ######################################### Clock ##################################################

# Time length of each tick (or time step) in the simulation. The day length (86400 seconds) should
# be divisible by the following tick length.
tick_length_s: 28800 # 3600 # 7200 # 10800 # 21600 # 43200 # 86400

# How long the simulation should run for, in days.
simulation_length_days: 365 # 730

# The date on which the simulation starts.
epoch: 1st January 2020

# ######################################### World ##################################################

# The Pandemia simulator acts on a world. The world consists of regions, with each region consisting
# of agents, locations and activities. The world additionally consists of a travel matrix,
# indicating how many agents should travel from each region to each other region each day. The world
# is built using a world factory. The choice of world factory, and its configuration, are made here.

world_factory:
  # The GlobalWorldFactory builds a world consisting of approximately two hundred regions, with each
  # region representing a real-world country. The number of agents in a region is, by default, given
  # by the true population size of the corresponding country. The scale_factor should therefore be
  # used appropriately, to produce a scale model of the world. The age structure of a region i
  # determined similarly. The GlobalWorldFactory builds regions consiting of only one location and
  # one activity. Mixing within regions is therefore homogeneous.
  __type__: global_world_factory.GlobalWorldFactory

  # A filepath to the shapefile for the countries, used for rendering and also for calculating which
  # regions are adjacent to one another. The shapefile is sourced from:
  # https://ec.europa.eu/eurostat/web/gisco/geodata/reference-data
  regions_shape_path: Scenarios/Global/data/country_data_shapefiles/CNTR_RG_60M_2020_4326.shp

  # A filepath to country data. For each country, this includes the corresponding name, iso2, iso3,
  # continent, average household size and total population size, together with the proportion of the
  # population in each age group. This data was sourced from:
  # https://population.un.org/wpp/Download/Standard/CSV/
  # https://www.un.org/development/desa/pd/data/household-size-and-composition
  regions_data_path: Scenarios/Global/data/country_data.csv

  # Travel between regions is either by air or not. If not, then travel must be between adjacent
  # regions. The GlobalWorldFactory implements a simple theoretical model of such travel, in which a
  # proportion of the population of each region travels to adjacent regions each day. This
  # proportion, which must be between 0.0 and 1.0, is determined by local_travel_prob_per_day. The
  # travelling population is then divided between the adjacent regions according to their population
  # size.
  local_travel_prob_per_day: 0.0

  # The parameter distance_threshold is used to determine which countries are adjacent to one
  # another. If the coordinates of two regions, as recorded in the shape file, are at their closest
  # within this distance of another then the two regions are considered adjacent.
  distance_threshold: 10

  # The numbers of agents travelling by air between each country each day is configured using data,
  # generated by a model developed by Huang et al:
  # https://doi.org/10.1371/journal.pone.0064317
  # and later refined by Mao et al. to provide monthly estimates in:
  # https://doi.org/10.1016/j.jtrangeo.2015.08.017
  # The data is sourced from:
  # https://www.worldpop.org/geodata/summary?id=1287
  # The airport_path parameter is a filepath to a data file which records which airports are in each
  # country. The air_travel_path parameter is a filepath to a data file which esimated the number of
  # people travelling from each airport to each other airport each month:
  airport_path: Scenarios/Global/data/airport_data.csv
  air_travel_path: Scenarios/Global/data/air_travel_data.csv

# ######################################### Seasonal Effects #######################################

# The seasonal effects component of the Pandemia simulator can be used to configure seasonal updates
# to parameter values.

seasonal_effects_model:
  # The DefaultSeasonalEffectsModel calculates a transmission multiplier for each country for each
  # month. The multiplier takes one of two values. The default value is 1.0, meaning no reduction in
  # tranmission. The alternative value is set by the parameter out_of_season_multiplier.
  __type__: default_seasonal_effects_model.DefaultSeasonalEffectsModel

  # The seasonal_multiplier_by_region_by_month parameter is a filepath to a data file which records
  # the months during which the flu season is typically observed in each country. If this parameter
  # is null, then the flu season is assumed to last all year. The data is sourced from:
  # https://www.ncbi.nlm.nih.gov/pmc/articles/PMC5821378/
  seasonal_multiplier_by_region_by_month: Scenarios/Global/data/country_data_seasonality.csv

  # During the flu season, transmission probabilities are multiplied by the following value:
  out_of_season_multiplier: 0.75

# ######################################### Health #################################################

health_model:
  __type__: default_health_model.DefaultHealthModel
  beta: [0.42]
  location_typ_multipliers: null
  facemask_transmission_multiplier: 1.0
  immunity_period_days: 30
  num_initial_infections_by_region_by_strain:
    'CN': [100000]
  mutation_matrix: [[1.0]]
  number_of_strains: 1
  preexisting_sigma_multiplier: 0.5
  preexisting_rho_multiplier: 0.5
  country_data_sigma_immunity_fp: null
  country_data_rho_immunity_fp: null
  preset_weights_by_age:
    0:  {preset_0: 1.0000, preset_1: 0.0000}
    5:  {preset_0: 0.9999, preset_1: 0.0001}
    10: {preset_0: 0.9999, preset_1: 0.0001}
    15: {preset_0: 0.9998, preset_1: 0.0002}
    20: {preset_0: 0.9998, preset_1: 0.0002}
    25: {preset_0: 0.9996, preset_1: 0.0004}
    30: {preset_0: 0.9994, preset_1: 0.0006}
    35: {preset_0: 0.9991, preset_1: 0.0009}
    40: {preset_0: 0.9985, preset_1: 0.0015}
    45: {preset_0: 0.9977, preset_1: 0.0023}
    50: {preset_0: 0.9964, preset_1: 0.0036}
    55: {preset_0: 0.9943, preset_1: 0.0057}
    60: {preset_0: 0.9911, preset_1: 0.0089}
    65: {preset_0: 0.9861, preset_1: 0.0139}
    70: {preset_0: 0.9783, preset_1: 0.0217}
    75: {preset_0: 0.9661, preset_1: 0.0339}
    80: {preset_0: 0.9470, preset_1: 0.0530}
    85: {preset_0: 0.9172, preset_1: 0.0828}
    90: {preset_0: 0.8381, preset_1: 0.1619}
  health_presets:
    preset_0:
      0:
        rho_immunity_failure:
          [[[[-1, 15, 30, 90, 180], [[1.0, 0.0], [1.0, 0.0], [1.0, 0.0], [1.0, 0.0], [1.0, 0.0]]]]]
        sigma_immunity_failure:
          [[[[-1, 15, 30, 90, 135, 180], [1.0, 0.0, 0.0, 0.35, 0.55, 0.90]]]]
        infectiousness:
          [[[-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],
            [0.000000000, 0.000000000, 0.000000000, 0.000177828, 0.007943284,
             0.562341455, 1.000000000, 0.944061094, 0.794328418, 0.562341455,
             0.316227839, 0.177827982, 0.079432842, 0.031622784, 0.010000002,
             0.004466837, 0.000000000]]]
        disease:
          [[[-1, 0, 15], [0.0, 0.15, 0.0]]]
        strain:
          [[[-1, 0, 15], [-1, 0, -1]]]
      1:
        rho_immunity_failure:
          [[[[-1, 15, 30, 90, 180], [[1.0, 0.0], [1.0, 0.0], [1.0, 0.0], [1.0, 0.0], [1.0, 0.0]]]]]
        sigma_immunity_failure:
          [[[[-1, 15, 30, 90, 135, 180], [1.0, 0.0, 0.0, 0.35, 0.55, 0.90]]]]
        infectiousness:
          [[[-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],
            [0.000000000, 0.000000000, 0.000000000, 0.000177828, 0.007943284,
             0.562341455, 1.000000000, 0.944061094, 0.794328418, 0.562341455,
             0.316227839, 0.177827982, 0.079432842, 0.031622784, 0.010000002,
             0.004466837, 0.000000000]]]
        disease:
          [[[-1, 0, 15], [0.0, 0.15, 0.0]]]
        strain:
          [[[-1, 0, 15], [-1, 0, -1]]]
    preset_1:
      0:
        rho_immunity_failure:
          [[[[-1, 15, 30, 90, 180], [[1.0, 0.0], [1.0, 0.0], [1.0, 0.0], [1.0, 0.0], [1.0, 0.0]]]]]
        sigma_immunity_failure:
          [[[[-1, 15, 30, 90, 135, 180], [1.0, 0.0, 0.0, 0.35, 0.55, 0.90]]]]
        infectiousness:
          [[[-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],
            [0.000000000, 0.000000000, 0.000000000, 0.000177828, 0.007943284,
             0.562341455, 1.000000000, 0.944061094, 0.794328418, 0.562341455,
             0.316227839, 0.177827982, 0.079432842, 0.031622784, 0.010000002,
             0.004466837, 0.000000000]]]
        disease:
          [[[-1, 0, 15], [0.0, 0.15, 0.0]]]
        strain:
          [[[-1, 0, 15], [-1, 0, -1]]]
      1:
        rho_immunity_failure:
          [[[[-1, 15, 30, 90, 180], [[1.0, 0.0], [1.0, 0.0], [1.0, 0.0], [1.0, 0.0], [1.0, 0.0]]]]]
        sigma_immunity_failure:
          [[[[-1, 15, 30, 90, 135, 180], [1.0, 0.0, 0.0, 0.35, 0.55, 0.90]]]]
        infectiousness:
          [[[-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],
            [0.000000000, 0.000000000, 0.000000000, 0.000177828, 0.007943284,
             0.562341455, 1.000000000, 0.944061094, 0.794328418, 0.562341455,
             0.316227839, 0.177827982, 0.079432842, 0.031622784, 0.010000002,
             0.004466837, 0.000000000]]]
        disease:
          [[[-1, 0, 15], [0.0, 0.15, 1.0]]]
        strain:
          [[[-1, 0, 15], [-1, 0, -1]]]
  # Rescale by time and population in each location, deactivate by setting sir_rescaling = False. If
  # activated, can still deactivate age mixing by setting age_mixing_matrices = null
  sir_rescaling: True
  age_mixing_matrices: null # Scenarios/Global/data/country_data_mixing_matrices/
  age_group_interval: 5
  # Deactivate by setting auto_generate_presets = False
  auto_generate_presets: False
  sir_beta: null # Units: days^{-1}
  sir_gamma_inverse: null # Units: days
  sir_disease_level: null
  sir_max_dist_days: null # Maximum infectiousness period, curtailing the geometric distribution 

# ######################################### Movement ###############################################

movement_model:
  __type__: void_movement_model.VoidMovementModel

# ######################################### Hospitalization and Death ##############################

hospitalization_and_death_model:
  __type__: void_hospitalization_and_death_model.VoidHospitalizationAndDeathModel

# ######################################### Testing and Contact Tracing ############################

testing_and_contact_tracing_model:
  __type__: void_testing_and_contact_tracing_model.VoidTestingAndContactTracingModel

# ######################################### Vaccination ############################################

vaccination_model:
  __type__: void_vaccination_model.VoidVaccinationModel

# ######################################### Regional Mixing ########################################

travel_model:
  __type__: default_travel_model.DefaultTravelModel
  travel_transmission_multiplier: 100.0
  interpolation: 0.0 # Between 0 and 1, values larger than 0 boost international travel

# ######################################### Input ##################################################

input_model:
  __type__: void_input_model.VoidInputModel

# ######################################### Output #################################################

regions_omitted_from_death_counts: ['CN', 'KP']
super_regions_omitted_from_deaths_counts: ['Africa', 'Asia']
historical_data_filepath: Scenarios/Global_Grid/data/historical_data/WHO-COVID-19-global-data.csv

# Output that should be rendered from the simulation:
reporters:
  cli.TimeReporter: {}
  # csv.StrainCounts:
  #   filename: /tmp/strain_counts.csv
  plot.PlotInfected:
    show: False
    savefig: True
    filename: /tmp/infected_global.png
    historical_data: null
  plot.PlotDeaths:
    show: False
    savefig: True
    daily_deaths_filename: /tmp/daily_deaths_global.png
    cumulative_deaths_filename: /tmp/cumulative_deaths_global.png
    deaths_by_country_filename: null
    historical_data: Scenarios/Global/data/historical_data/who_data.csv
  pygame_shapes.PygameShapes:
    fullscreen: True
    font_size: 20
    max_norm_prev: 1.0
    refresh_rate: 60
    display_width: 1500
    display_height: 700
    points_per_polygon: 400
    cmap: "Oranges"

# ######################################### Logging ################################################

# Format is https://docs.python.org/3/library/logging.config.html#logging-config-dictschema
logging:
  version: 1
  disable_existing_loggers: False
  formatters:
    standard:
      # format: '%(asctime)s [%(levelname)s] %(name)s: %(message)s'
      format: '[%(levelname)s] %(name)s: %(message)s'
  handlers:
    default:
      level: INFO
      formatter: standard
      class: logging.StreamHandler
      stream: 'ext://sys.stdout'  # Default is stderr
  loggers:
    '':   # root logger
      handlers: ['default']
      level: INFO
      propagate: False
#    'my.packg':
#      handlers: ['default']
#      level: INFO
#      propagate: False
#    '__main__':
#        handlers': ['default']
#        level: DEBUG
#        propagate: False
