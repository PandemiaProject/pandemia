---
# ######################################### Basic Parameters #######################################

# Scale factor. This rescales the number of individuals, locations, and other relevant quantities
# appearing in the world and simulation components.
scale_factor: 0.0005
# Profiler. If True then performance data is saved in a file called profiler_output. The parameter
# pstats_records determines how many lines to print in the profiler report.
profile: False
pstats_records: 100
# Random seed. Pandemia is stochastic and therefore requires a random seed.
random_seed: 1
# Parallel processing. The parameter num_jobs sets the maximum number of CPUs to used by the
# simulator. If num_jobs < 1 then this maximum is os.cpu_count().
enable_parallel: True
num_jobs: -1

# ######################################### Clock ##################################################

# Length of time step, in seconds. Must divide the day length (86400 seconds).
tick_length_s: 28800 # 3600 # 7200 # 10800 # 21600 # 43200 # 86400
# Length of the simulation, in days.
simulation_length_days: 365 # 730
# The date on which the simulation starts.
epoch: 1st January 2020

# ######################################### World ##################################################

# The Pandemia simulator acts on a world. The world consists of regions, with each region consisting
# of individuals, locations and activities. The world additionally consists of a travel matrix,
# indicating how many individuals travel from each region to each other region each day. The world
# is built using a world factory. The choice of world factory, and its configuration, are made here.

world_factory:
  # The GlobalWorldFactory builds a world consisting of approximately two hundred regions, with each
  # region representing a real-world country. The recommended scale factor is therefore 0.0005. This
  # world factory builds regions consiting of only one location and one activity, the mixing within
  # regions being therefore homogeneous.
  __type__: global_world_factory.GlobalWorldFactory
  # Filepath to shapefiles for the regions, used for rendering and calculating country adjacency.
  regions_shape_path: Scenarios/Global/data/country_data_shapefiles/CNTR_RG_60M_2020_4326.shp
  # Filepath to country data, including age structure and population sizes. The actual number of
  # agents is given by multiplying this data by the scale_factor.
  regions_data_path: Scenarios/Global/data/country_data.csv
  # Individuals travel between regions either by air or not. If not, then travel is between adjacent
  # regions, with this parameter determining the proportion of each population travelling to
  # adjacent regions each day.
  local_travel_prob_per_day: 0.0
  # This is used to determine region adjacency, in the units of the shape file.
  distance_threshold: 10
  # The number of individuals travelling by air is configured using data. These are the filepaths:
  airport_path: Scenarios/Global/data/airport_data.csv
  air_travel_path: Scenarios/Global/data/air_travel_data.csv

# ######################################### Seasonal Effects #######################################

# The seasonal effects component of the Pandemia simulator can be used to configure monthly updates
# to parameter values, for example the regional transmission multipliers.

seasonal_effects_model:
  # The DefaultSeasonalEffectsModel calculates a transmission multiplier for each country for each
  # month. The default value of the multiplier is 1.0, meaning no reduction in transmission. The
  # alternative value is set by the parameter out_of_season_multiplier.
  __type__: default_seasonal_effects_model.DefaultSeasonalEffectsModel
  # Filepath to seasonal influenza data for each country.
  seasonal_multiplier_by_region_by_month: Scenarios/Global/data/country_data_seasonality.csv
  # Outside of flu season, transmission probabilities are multiplied by this value.
  out_of_season_multiplier: 0.75

# ######################################### Health #################################################

# The health model keeps track of individual health.

health_model:
  # The DefaultHealthModel represents the health of an individual using five attributes:
  #  - strain (-1 if uninfected, else equal to the index of the strain)
  #  - disease (between 0 and 1, with 1 being dead)
  #  - infectiousness (0 if not infectious, else > 0)
  #  - sigma immunity (protection against infection)
  #  - rho immunity (protection against severe outcomes)
  # The immune system is represented using layers, with the outer layer (sigma immunity) determining
  # whether or not an infection is blocked, and the inner layers (rho immunity) determining the
  # severity of the outcome for infections that are not blocked.
  __type__: default_health_model.DefaultHealthModel
  # The number of strains of the pathogen.
  number_of_strains: 1
  # Control parameters determining the transmission probability of each strain. This list should be
  # of length equal to the number of strains.
  beta: [0.42]
  # A square matrix, whose rows should be probability vectors, indicating the probability of each
  # strain mutating into each other strain at the moment of infection.
  mutation_matrix: [[1.0]]
  # A dictionary pairing region names to lists. These list should be of length equal to the number
  # of strains. The numbers in these lists indicate how many initial infections there should for
  # each strain in the indicated region.
  num_initial_infections_by_region_by_strain:
    'CN': [100000]
  # A dictionary pairing location types to location transmission multipliers. Can be null, in which
  # case all location transmission multiplier are 1.0.
  location_typ_multipliers: null
  # The proportion of infectious material able to pass through a face mask. For a perfect face mask,
  # this parameter would be 0.0. For a face mask with zero effectiveness, it would be 1.0.
  facemask_transmission_multiplier: 1.0
  # Immunity is not updated daily, but on a cycle of this length. Reducing this parameter decreases
  # performance.
  immunity_period_days: 30
  # Filepaths to data recording, for each country and each strain, pre-existing levels of sigma and
  # rho immunity, and control parameters that multiply the numbers found in this data (if provided).
  country_data_sigma_immunity_fp: null
  country_data_rho_immunity_fp: null
  preexisting_sigma_multiplier: 0.5
  preexisting_rho_multiplier: 0.5
  # Each agent is assigned a health preset, describing how they will respond to an infection should
  # one occur. To each preset is associated a number of layers. Each layer encodes step functions
  # describing how the five health attributes change over time following an infection. See the
  # Health section of the User Guide for more details.
  health_presets:
    preset_0: # Preset name
      0: # Preset layer
        rho_immunity_failure:
          [[[[-1, 15, 30, 90, 180], [[0.0], [0.0], [0.0], [0.0], [0.0]]]]] 
        sigma_immunity_failure:
          [[[[-1, 15, 30, 90, 135, 180], [1.0, 0.0, 0.0, 0.35, 0.55, 0.90]]]]
        infectiousness:
          [[[-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],
            [0.000000000, 0.000000000, 0.000000000, 0.000177828, 0.007943284,
             0.562341455, 1.000000000, 0.944061094, 0.794328418, 0.562341455,
             0.316227839, 0.177827982, 0.079432842, 0.031622784, 0.010000002,
             0.004466837, 0.000000000]]]
        disease:
          [[[-1, 0, 15], [0.0, 0.15, 0.0]]]
        strain:
          [[[-1, 0, 15], [-1, 0, -1]]]
    preset_1:
      0:
        rho_immunity_failure:
          [[[[-1, 15, 30, 90, 180], [[0.0], [0.0], [0.0], [0.0], [0.0]]]]]
        sigma_immunity_failure:
          [[[[-1, 15, 30, 90, 135, 180], [1.0, 0.0, 0.0, 0.35, 0.55, 0.90]]]]
        infectiousness:
          [[[-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],
            [0.000000000, 0.000000000, 0.000000000, 0.000177828, 0.007943284,
             0.562341455, 1.000000000, 0.944061094, 0.794328418, 0.562341455,
             0.316227839, 0.177827982, 0.079432842, 0.031622784, 0.010000002,
             0.004466837, 0.000000000]]]
        disease:
          [[[-1, 0, 15], [0.0, 0.15, 1.0]]]
        strain:
          [[[-1, 0, 15], [-1, 0, -1]]]
  # The assignment of presets is random and based on age.
  preset_weights_by_age:
    0:  {preset_0: 1.0000, preset_1: 0.0000}
    5:  {preset_0: 0.9999, preset_1: 0.0001}
    10: {preset_0: 0.9999, preset_1: 0.0001}
    15: {preset_0: 0.9998, preset_1: 0.0002}
    20: {preset_0: 0.9998, preset_1: 0.0002}
    25: {preset_0: 0.9996, preset_1: 0.0004}
    30: {preset_0: 0.9994, preset_1: 0.0006}
    35: {preset_0: 0.9991, preset_1: 0.0009}
    40: {preset_0: 0.9985, preset_1: 0.0015}
    45: {preset_0: 0.9977, preset_1: 0.0023}
    50: {preset_0: 0.9964, preset_1: 0.0036}
    55: {preset_0: 0.9943, preset_1: 0.0057}
    60: {preset_0: 0.9911, preset_1: 0.0089}
    65: {preset_0: 0.9861, preset_1: 0.0139}
    70: {preset_0: 0.9783, preset_1: 0.0217}
    75: {preset_0: 0.9661, preset_1: 0.0339}
    80: {preset_0: 0.9470, preset_1: 0.0530}
    85: {preset_0: 0.9172, preset_1: 0.0828}
    90: {preset_0: 0.8381, preset_1: 0.1619}
  # This option implements homogeneous mixing, as found in SIR models, by mutliplying all
  # transmission probabilities by the reciprocal of the tick length, in days, divided by the number
  # of agents in each location.
  sir_rescaling: True
  # Contact matrices for age groups. Can be null, otherwise provide a filepath to the matrices.
  age_mixing_matrices: null # Scenarios/Global/data/country_data_mixing_matrices/
  age_group_interval: 5
  # If auto_generate_presets = True, then the presets dict above is ignored, with the presets being
  # instead generated systematically, using the geometric distributions of the SIR model. This only
  # works if number_of_strains = 1.
  auto_generate_presets: False
  sir_beta: null # Units: days^{-1}
  sir_gamma_inverse: null # Units: days
  sir_disease_level: null # The level of disease to be recorded for infected agents
  sir_max_dist_days: null # Maximum infectiousness period, curtailing the geometric distribution 

# ######################################### Movement ###############################################

movement_model:
  __type__: void_movement_model.VoidMovementModel

# ######################################### Hospitalization and Death ##############################

hospitalization_and_death_model:
  __type__: void_hospitalization_and_death_model.VoidHospitalizationAndDeathModel

# ######################################### Testing and Contact Tracing ############################

testing_and_contact_tracing_model:
  __type__: void_testing_and_contact_tracing_model.VoidTestingAndContactTracingModel

# ######################################### Vaccination ############################################

vaccination_model:
  __type__: void_vaccination_model.VoidVaccinationModel

# ######################################### Regional Mixing ########################################

# The travel component models the movement of individuals between regions each day.

travel_model:
  # In the DefaultTravelModel, only uninfected individuals are eligible to travel. The numbers of
  # travellers is given by the world travel matrix. Transmission is determined by the average
  # infectiousness of the destination region.
  __type__: default_travel_model.DefaultTravelModel
  # Travellers mix homogeneously with the entire population of the destination region, with
  # transmission probabilities divided by the number of agents in that region. This parameter is a
  # control parameter which multiplies that ratio.
  travel_transmission_multiplier: 100.0
  # This parameter, between 0.0 and 1.0, boosts the numbers travelling internationally. If 0.0 then
  # the number of travellers is as in the travel matrix. If 1.0 then the entire population travels
  # each day. Values in between interpolate between these numbers.
  interpolation: 0.0

# ######################################### Input ##################################################

input_model:
  __type__: void_input_model.VoidInputModel

# ######################################### Output #################################################

# Reporters collect simulation data and produce output.

# The user can omit regions and groups of regions from the final counts.
regions_omitted_from_death_counts: ['CN', 'KP']
super_regions_omitted_from_deaths_counts: ['Africa', 'Asia']
# Historical data used to calculate the difference (in l^2 norm) between simulation deaths and
# historical deaths. Can be set to null.
historical_data_filepath: Scenarios/Global/data/historical_data/WHO-COVID-19-global-data.csv

# Items in this dictionary report on the simulation. To disable a reporter, simply comment out.
reporters:

  # The reporter outputs a command line progress bar.
  cli.TimeReporter: {}

  # This reporter outputs a csv file, recording the numbers infected with each strain in each region
  # each day.
  csv.StrainCounts:
    # Where the user would like the csv saved.
    filename: /tmp/strain_counts.csv

  # This reporter plots the number of individuals infected each day.
  plot.PlotInfected:
    show: False
    savefig: True
    # Where the user would like the plot saved.
    filename: /tmp/infected_global.png

  # This reporter plots the number of new deaths each day and also cumulative deaths each day.
  plot.PlotDeaths:
    show: False
    savefig: True
    # Where the user would like the plots saved.
    daily_deaths_filename: /tmp/daily_deaths_global.png
    cumulative_deaths_filename: /tmp/cumulative_deaths_global.png
    # If a filepath is provided, the reporter also outputs a csv, recording total deaths by region.
    deaths_by_country_filename: null
    # If a filepath is provided here, the plots will include curves of historical deaths.
    historical_data: Scenarios/Global/data/historical_data/who_data.csv

  # This reporter plots a real-time visualization of prevalence in each region.
  pygame_shapes.PygameShapes:
    fullscreen: True
    font_size: 20
    # Prevalence is calculated as a number between 0.0 and 1.0, with regions coloured accordingly.
    # This parameter allows the user to rescale the colour map, by adjusting the maximum detected
    # prevalence. This can help visualize regions where prevalence is low.
    max_norm_prev: 1.0
    # Refresh rate.
    refresh_rate: 60
    # If fullscreen is False, then this sets the resolution of the plot.
    display_width: 1500
    display_height: 700
    # This determines how many coordinates are plotted of the border of each country.
    points_per_polygon: 400
    # The preferred colour map.
    cmap: "Oranges"

# ######################################### Logging ################################################

# Format is https://docs.python.org/3/library/logging.config.html#logging-config-dictschema
logging:
  version: 1
  disable_existing_loggers: False
  formatters:
    standard:
      # format: '%(asctime)s [%(levelname)s] %(name)s: %(message)s'
      format: '[%(levelname)s] %(name)s: %(message)s'
  handlers:
    default:
      level: INFO
      formatter: standard
      class: logging.StreamHandler
      stream: 'ext://sys.stdout'  # Default is stderr
  loggers:
    '':   # root logger
      handlers: ['default']
      level: INFO
      propagate: False
#    'my.packg':
#      handlers: ['default']
#      level: INFO
#      propagate: False
#    '__main__':
#        handlers': ['default']
#        level: DEBUG
#        propagate: False
